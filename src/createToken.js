import { ethers } from 'ethers';
import dotenv from 'dotenv';
dotenv.config();

const ERC20_BYTECODE = '0x608060405234801561000f575f5ffd5b50604051610d4e380380610d4e83398101604081905261002e916102a8565b8181600361003c8382610391565b5060046100498282610391565b50505061006533683635c9adc5dea000006100a860201b60201c565b604080516103e8815242602082015233917ff371d67483809edbc84279729528d26a3e37ce67f1e3a911778dbf88ff927ca2910160405180910390a25050610470565b6001600160a01b0382166100d65760405163ec442f0560e01b81525f60048201526024015b60405180910390fd5b6100e15f83836100e5565b5050565b6001600160a01b03831661010f578060025f828254610104919061044b565b9091555061017f9050565b6001600160a01b0383165f90815260208190526040902054818110156101615760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016100cd565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b03821661019b576002805482900390556101b9565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516101fe91815260200190565b60405180910390a3505050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f83011261022e575f5ffd5b81516001600160401b038111156102475761024761020b565b604051601f8201601f19908116603f011681016001600160401b03811182821017156102755761027561020b565b60405281815283820160200185101561028c575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b5f5f604083850312156102b9575f5ffd5b82516001600160401b038111156102ce575f5ffd5b6102da8582860161021f565b602085015190935090506001600160401b038111156102f7575f5ffd5b6103038582860161021f565b9150509250929050565b600181811c9082168061032157607f821691505b60208210810361033f57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561038c57805f5260205f20601f840160051c8101602085101561036a5750805b601f840160051c820191505b81811015610389575f8155600101610376565b50505b505050565b81516001600160401b038111156103aa576103aa61020b565b6103be816103b8845461030d565b84610345565b6020601f8211600181146103f0575f83156103d95750848201515b5f19600385901b1c1916600184901b178455610389565b5f84815260208120601f198516915b8281101561041f57878501518255602094850194600190920191016103ff565b508482101561043c57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b8082018082111561046a57634e487b7160e01b5f52601160045260245ffd5b92915050565b6108d18061047d5f395ff3fe608060405234801561000f575f5ffd5b50600436106100a6575f3560e01c806340c10f191161006e57806340c10f191461011f57806342966c681461013457806370a082311461014757806395d89b411461016f578063a9059cbb14610177578063dd62ed3e1461018a575f5ffd5b806306fdde03146100aa578063095ea7b3146100c857806318160ddd146100eb57806323b872dd146100fd578063313ce56714610110575b5f5ffd5b6100b26101c2565b6040516100bf919061072a565b60405180910390f35b6100db6100d636600461077a565b610252565b60405190151581526020016100bf565b6002545b6040519081526020016100bf565b6100db61010b3660046107a2565b61026b565b604051601281526020016100bf565b61013261012d36600461077a565b61028e565b005b6101326101423660046107dc565b61032a565b6100ef6101553660046107f3565b6001600160a01b03165f9081526020819052604090205490565b6100b26103c0565b6100db61018536600461077a565b6103cf565b6100ef610198366004610813565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6060600380546101d190610844565b80601f01602080910402602001604051908101604052809291908181526020018280546101fd90610844565b80156102485780601f1061021f57610100808354040283529160200191610248565b820191905f5260205f20905b81548152906001019060200180831161022b57829003601f168201915b5050505050905090565b5f3361025f8185856103dc565b60019150505b92915050565b5f336102788582856103ee565b610283858585610469565b506001949350505050565b5f81116102e25760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064015b60405180910390fd5b6102ec82826104c6565b6040805182815242602082015233917ff371d67483809edbc84279729528d26a3e37ce67f1e3a911778dbf88ff927ca2910160405180910390a25050565b5f81116103795760405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e203000000060448201526064016102d9565b61038333826104fe565b6040805182815242602082015233917fc9e664acae7915e5e50a15075448bd625dd198a1075499af683f6a323c7e4c2f910160405180910390a250565b6060600480546101d190610844565b5f3361025f818585610469565b6103e98383836001610532565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f198114610463578181101561045557604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016102d9565b61046384848484035f610532565b50505050565b6001600160a01b03831661049257604051634b637e8f60e11b81525f60048201526024016102d9565b6001600160a01b0382166104bb5760405163ec442f0560e01b81525f60048201526024016102d9565b6103e9838383610604565b6001600160a01b0382166104ef5760405163ec442f0560e01b81525f60048201526024016102d9565b6104fa5f8383610604565b5050565b6001600160a01b03821661052757604051634b637e8f60e11b81525f60048201526024016102d9565b6104fa825f83610604565b6001600160a01b03841661055b5760405163e602df0560e01b81525f60048201526024016102d9565b6001600160a01b03831661058457604051634a1406b160e11b81525f60048201526024016102d9565b6001600160a01b038085165f908152600160209081526040808320938716835292905220829055801561046357826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516105f691815260200190565b60405180910390a350505050565b6001600160a01b03831661062e578060025f828254610623919061087c565b9091555061069e9050565b6001600160a01b0383165f90815260208190526040902054818110156106805760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102d9565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b0382166106ba576002805482900390556106d8565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161071d91815260200190565b60405180910390a3505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b0381168114610775575f5ffd5b919050565b5f5f6040838503121561078b575f5ffd5b6107948361075f565b946020939093013593505050565b5f5f5f606084860312156107b4575f5ffd5b6107bd8461075f565b92506107cb6020850161075f565b929592945050506040919091013590565b5f602082840312156107ec575f5ffd5b5035919050565b5f60208284031215610803575f5ffd5b61080c8261075f565b9392505050565b5f5f60408385031215610824575f5ffd5b61082d8361075f565b915061083b6020840161075f565b90509250929050565b600181811c9082168061085857607f821691505b60208210810361087657634e487b7160e01b5f52602260045260245ffd5b50919050565b8082018082111561026557634e487b7160e01b5f52601160045260245ffdfea26469706673582212200291d53dd7617195803ef29e3234268a71bef9e4cf8b96b2753da2ba45895ecb64736f6c634300081b0033';

const ERC20_ABI = [
  // Minimal ABI for ERC20 deployment
  "constructor(string name, string symbol, uint256 initialSupply)",
  "function name() view returns (string)",
  "function symbol() view returns (string)",
  "function decimals() view returns (uint8)",
  "function totalSupply() view returns (uint256)",
  "function balanceOf(address) view returns (uint)",
  "function transfer(address to, uint amount) returns (bool)",
  "event Transfer(address indexed from, address indexed to, uint amount)"
];

function randomString(len) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    let str = '';
    for (let i = 0; i < len; i++) str += chars[Math.floor(Math.random() * chars.length)];
    return str;
}

export async function createTokenAuto() {
    const name = randomString(7);
    const symbol = randomString(3);
    const totalSupply = ethers.parseUnits('100000', 18);

    const provider = new ethers.JsonRpcProvider(process.env.RPC_URL);
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
    const factory = new ethers.ContractFactory(ERC20_ABI, ERC20_BYTECODE, wallet);

    // First message with token info
    const createMessage = `Creating new token:
Name: {cyan-fg}${name}{/cyan-fg} , Symbol: {cyan-fg}${symbol}{/cyan-fg}`;
    process.emit('token:create', createMessage);
    
    const contract = await factory.deploy(name, symbol, totalSupply);
    await contract.waitForDeployment();
    const address = await contract.getAddress();
    
    // Final success message with address
    const successMessage = `Token created successfully:
Address: {cyan-fg}${address}{/cyan-fg}`;
    process.emit('token:success', successMessage);
    
    return address;
}
